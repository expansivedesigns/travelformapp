{"version":3,"sources":["components/FormComponent.js","components/FormContainer.js","App.js","serviceWorker.js","index.js"],"names":["FormComponent","props","className","type","name","value","data","firstName","placeholder","onChange","handleChange","lastName","age","checked","gender","destination","dietaryRestriction","FormContainer","state","bind","event","target","this","setState","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAoGeA,MAlFf,SAAuBC,GACtB,OACQ,0BAAMC,UAAU,eACX,wBAAIA,UAAU,cAAd,mBACA,0BAAMA,UAAU,YAChB,2BAAQC,KAAK,OACLC,KAAK,YACLC,MAAOJ,EAAMK,KAAKC,UAClBC,YAAY,aACZC,SAAUR,EAAMS,eAExB,6BAEA,2BAAQP,KAAK,OACLC,KAAK,WACLC,MAAOJ,EAAMK,KAAKK,SAClBH,YAAY,YACZC,SAAUR,EAAMS,eAExB,6BAEA,2BAAQP,KAAK,OACLC,KAAK,MACLC,MAAOJ,EAAMK,KAAKM,IAClBJ,YAAY,MACZC,SAAUR,EAAMS,eAExB,6BACA,6BAEA,2BAAQP,KAAK,QACLC,KAAK,SACLC,MAAM,OACNQ,QAA+B,SAAtBZ,EAAMK,KAAKQ,OACpBL,SAAUR,EAAMS,eA9BxB,SAiCA,2BAAQP,KAAK,QACLC,KAAK,SACLC,MAAM,SACNQ,QAA+B,WAAtBZ,EAAMK,KAAKQ,OACpBL,SAAUR,EAAMS,eArCxB,WAuCA,6BACA,6BAEA,iDACA,4BAAQN,KAAK,cAAcC,MAAOJ,EAAMK,KAAKS,YAAaN,SAAUR,EAAMS,cACtE,4BAAQL,MAAM,cAAd,cACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,WAAd,YAEJ,6BACA,6BAEA,2BAAQF,KAAK,WACLC,KAAK,qBACLC,MAAOJ,EAAMK,KAAKU,mBAClBH,QAASZ,EAAMK,KAAKU,mBACpBP,SAAUR,EAAMS,eAvDxB,wBAyDA,6BACA,6BAEA,uDAAmC,6BAEnC,2CAAiBT,EAAMK,KAAKC,UAA5B,IAAwCN,EAAMK,KAAKK,UACnD,qCAAWV,EAAMK,KAAKM,KACtB,uCAAaX,EAAMK,KAAKQ,QACxB,iDAAuBb,EAAMK,KAAKS,aAClC,qDAA2Bd,EAAMK,KAAKU,mBAAqB,MAAQ,MAGnE,4BAAQd,UAAU,cAAlB,WAGA,wBAAIA,UAAU,cAAd,kCC9CCe,E,YA/BX,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACXX,UAAW,GACXI,SAAU,GACVC,IAAK,GACLE,OAAQ,GACRC,YAAa,GACbC,oBAAoB,GAG1B,EAAKN,aAAe,EAAKA,aAAaS,KAAlB,gBAXP,E,0EAcAC,GAAO,IAAD,EACwBA,EAAMC,OAArClB,EADO,EACPA,KAAMC,EADC,EACDA,KAAMC,EADL,EACKA,MAAOQ,EADZ,EACYA,QAClB,aAATV,EAAsBmB,KAAKC,SAAL,eAAkBnB,EAAOS,IAAcS,KAAKC,SAAL,eAAkBnB,EAAOC,M,uEAQtF,OACI,kBAAC,EAAD,CAAgBK,aAAcY,KAAKZ,aACnBJ,KAAMgB,KAAKJ,Y,GA3BXM,aCKbC,MAPf,WACI,OACI,kBAAC,EAAD,OCJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7f3411b1.chunk.js","sourcesContent":["/* \r\nContainer/Component Architecture\r\n\r\nsee explanation:  http://medium.com/@dan-abramov/smart-and-dumb-components-7ca2f9a7c7d0\r\nDan Abramov is one of the primary develolpers of the React framework\r\n\r\nForm Component - UI LOGIC / RENDERING LOGIC Some names:  \"Presentational Component\", \"Dumb Components\"\r\n\r\n*Only in charge of receiving props and displaying things correctly\r\n\r\nhold all elements but you need to pass down all properties through props\r\n\r\n*/\r\n\r\nimport React from 'react'\r\nimport '../styles.css'\r\n\r\n\r\nfunction FormComponent(props){\r\n\treturn(\r\n         <main className=\"App-wrapper\">\r\n              <h1 className=\"App-header\">Travel Form App</h1>\r\n              <form className=\"App-form\" >\r\n              <input  type=\"text\" \r\n                      name=\"firstName\" \r\n                      value={props.data.firstName} \r\n                      placeholder=\"First Name\" \r\n                      onChange={props.handleChange}\r\n              />\r\n              <br />\r\n\r\n              <input  type=\"text\" \r\n                      name=\"lastName\" \r\n                      value={props.data.lastName} \r\n                      placeholder=\"Last Name\" \r\n                      onChange={props.handleChange}\r\n              />\r\n              <br />\r\n\r\n              <input  type=\"text\" \r\n                      name=\"age\" \r\n                      value={props.data.age}\r\n                      placeholder=\"Age\"                        \r\n                      onChange={props.handleChange}\r\n              />\r\n              <br />\r\n              <br />\r\n\r\n              <input  type=\"radio\" \r\n                      name=\"gender\" \r\n                      value=\"Male\"\r\n                      checked={props.data.gender === \"Male\"}\r\n                      onChange={props.handleChange}\r\n              />  Male\r\n\r\n              <input  type=\"radio\" \r\n                      name=\"gender\" \r\n                      value=\"Female\"\r\n                      checked={props.data.gender === \"Female\"}\r\n                      onChange={props.handleChange}\r\n              />  Female             \r\n              <br />              \r\n              <br />\r\n\r\n              <label>Destination:  </label> \r\n              <select name=\"destination\" value={props.data.destination} onChange={props.handleChange}>\r\n                  <option value=\"Long Beach\">Long Beach</option>\r\n                  <option value=\"San Diego\">San Diego</option>\r\n                  <option value=\"Bangkok\">Bangkok</option>\r\n              </select>\r\n              <br />\r\n              <br />\r\n\r\n              <input  type=\"checkbox\" \r\n                      name=\"dietaryRestriction\" \r\n                      value={props.data.dietaryRestriction} \r\n                      checked={props.data.dietaryRestriction} \r\n                      onChange={props.handleChange}\r\n              />Dietary Restrictions?                         \r\n              <br />\r\n              <br />\r\n\r\n              <label>Entered Information:</label><br />\r\n\r\n              <h3>Full Name:  {props.data.firstName} {props.data.lastName}</h3>\r\n              <h3>Age:  {props.data.age}</h3>\r\n              <h3>Gender: {props.data.gender}</h3>\r\n              <h3>Your Destination: {props.data.destination}</h3>\r\n              <h3>Dietary Restrictions: {props.data.dietaryRestriction ? \"Yes\" : \"No\"}</h3> \r\n\r\n\r\n              <button className=\"App-button\">Submit</button>\r\n\r\n              </form>\r\n              <h3 className=\"App-footer\">React JS - TaLoveous Goodwin</h3>\r\n\r\n          </main>\r\n\t\t)\r\n}\r\n\r\nexport default FormComponent\r\n","/* \r\nContainer/Component Architecture\r\n\r\nForm Container - BUSINESS LOGIC.  Other names: \"Container Components\", \"Smart Component\"  \r\nMandates how the business logic changes.  \r\n*It's job is to maintain and update state.  Delegrates all the UI logic to another component\r\nHolds class, this.state, methods, render(),\r\nimports component files and export\r\n\r\nRemember to use an equal sign not a colon to assign the event. target to the const { type, name, value, checked }\r\nin handleChange\r\n*/\r\n\r\nimport React, {Component} from 'react'\r\nimport FormComponent from './FormComponent'\r\n\r\nclass FormContainer extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n          firstName: \"\",\r\n          lastName: \"\",\r\n          age: \"\",\r\n          gender: \"\",\r\n          destination: \"\",\r\n          dietaryRestriction: false\r\n        }\r\n\r\n    this.handleChange = this.handleChange.bind(this)\r\n    }\r\n\r\n    handleChange(event){\r\n        const { type, name, value, checked } = event.target\r\n        type === \"checkbox\" ? this.setState({  [name]: checked  }) : this.setState({  [name]: value  })     \r\n      }\r\n\r\n    handleSubmit(){\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <FormComponent  handleChange={this.handleChange} \r\n                            data={this.state}/>\r\n      )\r\n    }\r\n}\r\n\r\nexport default FormContainer","/* \nContainer/Component Architecture\n\nreturns FormContainer - table of contents that delegrates the actual rendering to the Components themselves\n\n\nThis app creates an interactive application that collects users data stored in and updated on the fly.\nForm data can be submitted to an API\n*/\n\nimport React from 'react'\nimport FormContainer from './components/FormContainer'\n\n\nfunction App(){\n    return(\n        <FormContainer />\n      )  \n}\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}